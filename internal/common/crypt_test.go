package common

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGetKeyFromString(t *testing.T) {
	strKey := "testKey"
	expected := []byte{0x74, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79}
	actual, err := GetKeyFromString(strKey)
	require.NoError(t, err)
	assert.ElementsMatch(t, actual, expected)
}

func TestSign(t *testing.T) {
	msg := []byte("testMsg_qwerty")
	key := []byte{0x74, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79}
	expected := []byte{
		0x86, 0x3c, 0x10, 0x46, 0x65, 0xc8, 0xc0, 0x98,
		0x7b, 0x66, 0xea, 0xab, 0x11, 0x43, 0xc6, 0xaf,
		0x68, 0x35, 0xed, 0x87, 0x77, 0x9c, 0xb9, 0xfb,
		0x1d, 0xc5, 0xa9, 0x8d, 0x7e, 0xe6, 0x7d, 0x79,
	}

	actual, err := Sign(msg, key)
	require.NoError(t, err)
	assert.ElementsMatch(t, actual, expected)
}

func TestCheckHashPositiv(t *testing.T) {
	msg := []byte("testMsg_qwerty")
	key := []byte{0x74, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79}
	expectedPositiv := []byte{
		0x86, 0x3c, 0x10, 0x46, 0x65, 0xc8, 0xc0, 0x98,
		0x7b, 0x66, 0xea, 0xab, 0x11, 0x43, 0xc6, 0xaf,
		0x68, 0x35, 0xed, 0x87, 0x77, 0x9c, 0xb9, 0xfb,
		0x1d, 0xc5, 0xa9, 0x8d, 0x7e, 0xe6, 0x7d, 0x79,
	}
	actual := CheckHash(msg, expectedPositiv, key)
	if !actual {
		t.Errorf("Error check hash. expected:true; actual%t", actual)
	}
}

func TestCheckHashNegativ(t *testing.T) {
	msg := []byte("testMsg_qwerty")
	key := []byte{0x74, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79}
	expectedPositiv := []byte{
		0x00, 0x00, 0x10, 0x46, 0x65, 0xc8, 0xc0, 0x98,
		0x7b, 0x66, 0xea, 0xab, 0x11, 0x43, 0xc6, 0xaf,
		0x68, 0x35, 0xed, 0x87, 0x77, 0x9c, 0xb9, 0xfb,
		0x1d, 0xc5, 0xa9, 0x8d, 0x7e, 0xe6, 0x7d, 0x79,
	}
	actual := CheckHash(msg, expectedPositiv, key)
	if actual {
		t.Errorf("Error check hash. expected:false; actual%t", actual)
	}
}

func TestCrypto(t *testing.T) {
	logger := &FakeLogger{}
	priv, public := GenerateKeyPair(2048, logger)
	data := []byte{0x74, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79}

	publicData, _ := PublicKeyToBytes(public)
	temp := EncryptData(data, publicData, logger)

	privData := PrivateKeyToBytes(priv)
	tempDecrypt := DecryptData(temp, privData, logger)
	assert.ElementsMatch(t, tempDecrypt, data)
}
