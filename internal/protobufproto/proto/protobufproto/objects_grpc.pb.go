// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: objects.proto

package protobufproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCMetricsService_Update_FullMethodName = "/protobufproto.GRPCMetricsService/Update"
	GRPCMetricsService_Value_FullMethodName  = "/protobufproto.GRPCMetricsService/Value"
)

// GRPCMetricsServiceClient is the client API for GRPCMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCMetricsServiceClient interface {
	Update(ctx context.Context, in *RequestMetric, opts ...grpc.CallOption) (*Status, error)
	Value(ctx context.Context, in *RequestMetric, opts ...grpc.CallOption) (*RequestAnsMetric, error)
}

type gRPCMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCMetricsServiceClient(cc grpc.ClientConnInterface) GRPCMetricsServiceClient {
	return &gRPCMetricsServiceClient{cc}
}

func (c *gRPCMetricsServiceClient) Update(ctx context.Context, in *RequestMetric, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, GRPCMetricsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMetricsServiceClient) Value(ctx context.Context, in *RequestMetric, opts ...grpc.CallOption) (*RequestAnsMetric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAnsMetric)
	err := c.cc.Invoke(ctx, GRPCMetricsService_Value_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCMetricsServiceServer is the server API for GRPCMetricsService service.
// All implementations must embed UnimplementedGRPCMetricsServiceServer
// for forward compatibility.
type GRPCMetricsServiceServer interface {
	Update(context.Context, *RequestMetric) (*Status, error)
	Value(context.Context, *RequestMetric) (*RequestAnsMetric, error)
	mustEmbedUnimplementedGRPCMetricsServiceServer()
}

// UnimplementedGRPCMetricsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCMetricsServiceServer struct{}

func (UnimplementedGRPCMetricsServiceServer) Update(context.Context, *RequestMetric) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGRPCMetricsServiceServer) Value(context.Context, *RequestMetric) (*RequestAnsMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Value not implemented")
}
func (UnimplementedGRPCMetricsServiceServer) mustEmbedUnimplementedGRPCMetricsServiceServer() {}
func (UnimplementedGRPCMetricsServiceServer) testEmbeddedByValue()                            {}

// UnsafeGRPCMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCMetricsServiceServer will
// result in compilation errors.
type UnsafeGRPCMetricsServiceServer interface {
	mustEmbedUnimplementedGRPCMetricsServiceServer()
}

func RegisterGRPCMetricsServiceServer(s grpc.ServiceRegistrar, srv GRPCMetricsServiceServer) {
	// If the following call pancis, it indicates UnimplementedGRPCMetricsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCMetricsService_ServiceDesc, srv)
}

func _GRPCMetricsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMetricsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMetricsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMetricsServiceServer).Update(ctx, req.(*RequestMetric))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMetricsService_Value_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMetric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMetricsServiceServer).Value(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMetricsService_Value_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMetricsServiceServer).Value(ctx, req.(*RequestMetric))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCMetricsService_ServiceDesc is the grpc.ServiceDesc for GRPCMetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCMetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufproto.GRPCMetricsService",
	HandlerType: (*GRPCMetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _GRPCMetricsService_Update_Handler,
		},
		{
			MethodName: "Value",
			Handler:    _GRPCMetricsService_Value_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "objects.proto",
}
