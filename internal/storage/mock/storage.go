// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	common "github.com/Alexandrfield/Metrics/internal/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBasicStorage is a mock of BasicStorage interface.
type MockBasicStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBasicStorageMockRecorder
}

// MockBasicStorageMockRecorder is the mock recorder for MockBasicStorage.
type MockBasicStorageMockRecorder struct {
	mock *MockBasicStorage
}

// NewMockBasicStorage creates a new mock instance.
func NewMockBasicStorage(ctrl *gomock.Controller) *MockBasicStorage {
	mock := &MockBasicStorage{ctrl: ctrl}
	mock.recorder = &MockBasicStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicStorage) EXPECT() *MockBasicStorageMockRecorder {
	return m.recorder
}

// AddCounter mocks base method.
func (m *MockBasicStorage) AddCounter(metricName string, metricValue common.TypeCounter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounter", metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounter indicates an expected call of AddCounter.
func (mr *MockBasicStorageMockRecorder) AddCounter(metricName, metricValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockBasicStorage)(nil).AddCounter), metricName, metricValue)
}

// AddGauge mocks base method.
func (m *MockBasicStorage) AddGauge(name string, value common.TypeGauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGauge indicates an expected call of AddGauge.
func (mr *MockBasicStorageMockRecorder) AddGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGauge", reflect.TypeOf((*MockBasicStorage)(nil).AddGauge), name, value)
}

// AddMetrics mocks base method.
func (m *MockBasicStorage) AddMetrics(metrics []common.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetrics", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetrics indicates an expected call of AddMetrics.
func (mr *MockBasicStorageMockRecorder) AddMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetrics", reflect.TypeOf((*MockBasicStorage)(nil).AddMetrics), metrics)
}

// GetAllMetricName mocks base method.
func (m *MockBasicStorage) GetAllMetricName() ([]string, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetricName")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// GetAllMetricName indicates an expected call of GetAllMetricName.
func (mr *MockBasicStorageMockRecorder) GetAllMetricName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetricName", reflect.TypeOf((*MockBasicStorage)(nil).GetAllMetricName))
}

// GetCounter mocks base method.
func (m *MockBasicStorage) GetCounter(metricName string) (common.TypeCounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", metricName)
	ret0, _ := ret[0].(common.TypeCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockBasicStorageMockRecorder) GetCounter(metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockBasicStorage)(nil).GetCounter), metricName)
}

// GetGauge mocks base method.
func (m *MockBasicStorage) GetGauge(metricName string) (common.TypeGauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", metricName)
	ret0, _ := ret[0].(common.TypeGauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockBasicStorageMockRecorder) GetGauge(metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockBasicStorage)(nil).GetGauge), metricName)
}

// PingDatabase mocks base method.
func (m *MockBasicStorage) PingDatabase() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDatabase")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PingDatabase indicates an expected call of PingDatabase.
func (mr *MockBasicStorageMockRecorder) PingDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDatabase", reflect.TypeOf((*MockBasicStorage)(nil).PingDatabase))
}
