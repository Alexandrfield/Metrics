// Code generated by MockGen. DO NOT EDIT.
// Source: request.go

// Package mock_requesthandler is a generated GoMock package.
package mock_requesthandler

import (
	reflect "reflect"

	common "github.com/Alexandrfield/Metrics/internal/common"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricsStorage is a mock of MetricsStorage interface.
type MockMetricsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsStorageMockRecorder
}

// MockMetricsStorageMockRecorder is the mock recorder for MockMetricsStorage.
type MockMetricsStorageMockRecorder struct {
	mock *MockMetricsStorage
}

// NewMockMetricsStorage creates a new mock instance.
func NewMockMetricsStorage(ctrl *gomock.Controller) *MockMetricsStorage {
	mock := &MockMetricsStorage{ctrl: ctrl}
	mock.recorder = &MockMetricsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsStorage) EXPECT() *MockMetricsStorageMockRecorder {
	return m.recorder
}

// AddMetrics mocks base method.
func (m *MockMetricsStorage) AddMetrics(metrics []common.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetrics", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetrics indicates an expected call of AddMetrics.
func (mr *MockMetricsStorageMockRecorder) AddMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetrics", reflect.TypeOf((*MockMetricsStorage)(nil).AddMetrics), metrics)
}

// GetAllValue mocks base method.
func (m *MockMetricsStorage) GetAllValue() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValue")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValue indicates an expected call of GetAllValue.
func (mr *MockMetricsStorageMockRecorder) GetAllValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValue", reflect.TypeOf((*MockMetricsStorage)(nil).GetAllValue))
}

// GetCounterValue mocks base method.
func (m *MockMetricsStorage) GetCounterValue(metricName string) (common.TypeCounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterValue", metricName)
	ret0, _ := ret[0].(common.TypeCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterValue indicates an expected call of GetCounterValue.
func (mr *MockMetricsStorageMockRecorder) GetCounterValue(metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterValue", reflect.TypeOf((*MockMetricsStorage)(nil).GetCounterValue), metricName)
}

// GetGaugeValue mocks base method.
func (m *MockMetricsStorage) GetGaugeValue(metricName string) (common.TypeGauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeValue", metricName)
	ret0, _ := ret[0].(common.TypeGauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeValue indicates an expected call of GetGaugeValue.
func (mr *MockMetricsStorageMockRecorder) GetGaugeValue(metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeValue", reflect.TypeOf((*MockMetricsStorage)(nil).GetGaugeValue), metricName)
}

// PingDatabase mocks base method.
func (m *MockMetricsStorage) PingDatabase() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDatabase")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PingDatabase indicates an expected call of PingDatabase.
func (mr *MockMetricsStorageMockRecorder) PingDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDatabase", reflect.TypeOf((*MockMetricsStorage)(nil).PingDatabase))
}

// SetCounterValue mocks base method.
func (m *MockMetricsStorage) SetCounterValue(metricName string, metricValue common.TypeCounter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounterValue", metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounterValue indicates an expected call of SetCounterValue.
func (mr *MockMetricsStorageMockRecorder) SetCounterValue(metricName, metricValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounterValue", reflect.TypeOf((*MockMetricsStorage)(nil).SetCounterValue), metricName, metricValue)
}

// SetGaugeValue mocks base method.
func (m *MockMetricsStorage) SetGaugeValue(metricName string, metricValue common.TypeGauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGaugeValue", metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGaugeValue indicates an expected call of SetGaugeValue.
func (mr *MockMetricsStorageMockRecorder) SetGaugeValue(metricName, metricValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGaugeValue", reflect.TypeOf((*MockMetricsStorage)(nil).SetGaugeValue), metricName, metricValue)
}
